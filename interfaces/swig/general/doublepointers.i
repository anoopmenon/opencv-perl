
/*//////////////////////////////////////////////////////////////////////////////////////////////////
// This file was automatically generated from the extract_doublepointers.py script found in the 
// 'utils' subdirectory of the OpenCV distribution.  Run it on the .cpp file generated by swig to
// generate the double pointer typemaps
/////////////////////////////////////////////////////////////////////////////////////////////////M*/

%typemap(in) CvGraphEdge **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvGraphVtx **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvHistogram **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvMatND **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvPoint **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvSeq **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvSeqBlock **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvSetElem **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvSubdiv2DPoint **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvConnectedComp_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvPoint2D32f_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvPoint_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvQuadEdge2D_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvRect_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvSeq_p_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvTupleTCvPoint_2_t_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) CvTypedSeqTCvTupleTfloat_2_t_t **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) _CvContourScanner **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) _IplImage **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) char **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) float **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) unsigned_char **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
%typemap(in) void **  (void * vptr, $*1_ltype buffer) {
	if ((SWIG_ConvertPtr($input, &vptr, $*1_descriptor, 1)) == -1){
		SWIG_fail;
	}
	buffer = ($*1_ltype) vptr;
	$1=&buffer;
}
