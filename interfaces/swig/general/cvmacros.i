
/*//////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated from the extract_macros.py script found in the 'utils'
// subdirectory of the OpenCV distribution.  If the generated function prototypes are missing or 
// incorrect, it is likely that a name->type mapping will have to be added to the script 
/////////////////////////////////////////////////////////////////////////////////////////////////M*/

void cvFree(void ** ptr);
void CV_READ_CHAIN_POINT(CvPoint _pt, CvChainPtReader reader);
void * CV_MAT_ELEM_PTR(CvMat mat,int row,int col);
void * CV_MAT_ELEM_PTR_FAST(CvMat mat,int row,int col,int pix_size);
void * CV_NODE_VAL(CvSparseMat* mat,CvSparseNode * node);

int * CV_NODE_IDX(CvSparseMat* mat,CvSparseNode * node);
CvQuadEdge2D* CV_SUBDIV2D_NEXT_EDGE(CvSubdiv2DEdge edge);
void CV_SWAP(int a,int b,int t);
int CV_IMIN(int a,int b);
int CV_IMAX(int a,int b);
int CV_IABS(int a);
void CV_CMP(int a,int b);
void CV_SIGN(int a);
void cvInvSqrt(double value);
void cvSqrt(double value);
int CV_IS_IMAGE_HDR(CvArr * img);
int CV_IS_IMAGE(CvArr * img);
int CV_MAKETYPE(int depth,int cn);
int CV_8UC(int n);
int CV_8SC(int n);
int CV_16UC(int n);
int CV_16SC(int n);
int CV_32SC(int n);
int CV_32FC(int n);
int CV_64FC(int n);
int CV_MAT_CN(int flags);
int CV_MAT_DEPTH(int flags);
int CV_MAT_TYPE(int flags);
int CV_IS_MAT_CONT(int flags);
int CV_IS_TEMP_MAT(int flags);
int CV_IS_MAT_HDR(CvMat* mat);
int CV_IS_MAT(CvMat* mat);
int CV_IS_MASK_ARR(CvMat* mat);
int CV_ARE_TYPES_EQ(CvMat* mat1,CvMat* mat2);
int CV_ARE_CNS_EQ(CvMat* mat1,CvMat* mat2);
int CV_ARE_DEPTHS_EQ(CvMat* mat1,CvMat* mat2);
int CV_ARE_SIZES_EQ(CvMat* mat1,CvMat* mat2);
int CV_IS_MAT_CONST(CvMat* mat);
int CV_ELEM_SIZE1(int type);
int CV_ELEM_SIZE(int type);
int CV_IS_MATND_HDR(CvMat* mat);
int CV_IS_MATND(CvMat* mat);
int CV_IS_SPARSE_MAT_HDR(CvMat* mat);
int CV_IS_SPARSE_MAT(CvMat* mat);
int CV_IS_HIST(CvHistogram * hist);
int CV_IS_UNIFORM_HIST(CvHistogram * hist);
int CV_IS_SPARSE_HIST(CvHistogram * hist);
int CV_HIST_HAS_RANGES(CvHistogram * hist);
int CV_IS_STORAGE(CvMemStorage * storage);
int CV_IS_SET_ELEM(void * ptr);
int CV_IS_SEQ(CvSeq* seq);
int CV_IS_SET(CvSet * set);
int CV_SEQ_ELTYPE(CvSeq* seq);
int CV_SEQ_KIND(CvSeq* seq);
int CV_IS_SEQ_INDEX(CvSeq* seq);
int CV_IS_SEQ_CURVE(CvSeq* seq);
int CV_IS_SEQ_CLOSED(CvSeq* seq);
int CV_IS_SEQ_CONVEX(CvSeq* seq);
int CV_IS_SEQ_HOLE(CvSeq* seq);
int CV_IS_SEQ_SIMPLE(CvSeq* seq);
int CV_IS_SEQ_POINT_SET(CvSeq* seq);
int CV_IS_SEQ_POINT_SUBSET(CvSeq* seq);
int CV_IS_SEQ_POLYLINE(CvSeq* seq);
int CV_IS_SEQ_POLYGON(CvSeq* seq);
int CV_IS_SEQ_CHAIN(CvSeq* seq);
int CV_IS_SEQ_CONTOUR(CvSeq* seq);
int CV_IS_SEQ_CHAIN_CONTOUR(CvSeq* seq);
int CV_IS_SEQ_POLYGON_TREE(CvSeq* seq);
int CV_IS_GRAPH(CvSeq* seq);
int CV_IS_GRAPH_ORIENTED(CvSeq* seq);
int CV_IS_SUBDIV2D(CvSeq* seq);
void CV_WRITE_SEQ_ELEM_VAR(void * elem_ptr,CvSeqWriter writer);
void CV_WRITE_SEQ_ELEM(CvPoint elem,CvSeqWriter writer);
void CV_NEXT_SEQ_ELEM(int elem_size,CvSeqReader reader);
void CV_PREV_SEQ_ELEM(int elem_size,CvSeqReader reader);
void CV_READ_SEQ_ELEM(CvPoint elem,CvSeqReader reader);
void CV_REV_READ_SEQ_ELEM(CvPoint elem,CvSeqReader reader);
CvPoint CV_CURRENT_POINT(CvSeqReader reader);
CvPoint CV_PREV_POINT(CvSeqReader reader);
void CV_READ_EDGE(CvPoint pt1,CvPoint pt2,CvSeqReader reader);
CvGraphEdge * CV_NEXT_GRAPH_EDGE(CvGraphEdge * edge,CvGraphVtx * vertex);
int CV_NODE_TYPE(int flags);
int CV_NODE_IS_INT(int flags);
int CV_NODE_IS_REAL(int flags);
int CV_NODE_IS_STRING(int flags);
int CV_NODE_IS_SEQ(int flags);
int CV_NODE_IS_MAP(int flags);
int CV_NODE_IS_COLLECTION(int flags);
int CV_NODE_IS_FLOW(int flags);
int CV_NODE_IS_EMPTY(int flags);
int CV_NODE_IS_USER(int flags);
int CV_NODE_HAS_NAME(int flags);
int CV_NODE_SEQ_IS_SIMPLE(CvSeq* seq);
void cvReshapeND(CvArr * arr,CvMat * header,int new_cn,int new_dims,int * new_sizes);
void cvConvert(CvArr * src,CvArr * dst);
void cvAXPY(CvArr * A,double real_scalar,CvArr * B,CvArr * C);
void cvAbs(CvArr * src,CvArr * dst);
void cvMatMulAdd(CvArr * src1,CvArr * src2,CvArr * src3,CvArr * dst);
void cvMatMul(CvArr * src1,CvArr * src2,CvArr * dst);
void cvGetGraphVtx(CvGraph * graph,int idx);
int cvGraphVtxIdx(CvGraph * graph,CvGraphVtx * vtx);
int cvGraphEdgeIdx(CvGraph * graph,CvGraphEdge * edge);
int cvGraphGetVtxCount(CvGraph * graph);
int cvGraphGetEdgeCount(CvGraph * graph);
int CV_IS_GRAPH_VERTEX_VISITED(CvGraphVtx * vtx);
int CV_IS_GRAPH_EDGE_VISITED(CvGraphEdge * edge);
CvScalar CV_RGB(double r,double g,int b);
void CV_NEXT_LINE_POINT(CvLineIterator line_iterator);
void CV_SET_IMAGE_IO_FUNCTIONS();
void CV_INIT_3X3_DELTAS(double * deltas,int step,int nch);
int CV_IS_HAAR_CLASSIFIER(void * haar);
void cvCalcBackProject(IplImage * image,CvArr * dst,CvHistogram * hist);
void cvCalcBackProjectPatch(IplImage * image,CvArr * dst,CvSize range,CvHistogram * hist,int method,double factor);
